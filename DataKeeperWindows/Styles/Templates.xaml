<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#FF969696"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF969696"/>
    
    <!-- #region Icon App -->
    <Image x:Key="Application.Icon" 
           Source="/Resources/Logo.png" 
           Height="20"
           Width="20" 
           Canvas.Left="5" 
           Margin="-5,-5,-5,-5"/>
    <!--#endregion-->


    <!-- #region Windows -->
    <SolidColorBrush x:Key="Window.Static.Background" Color="#FF282828"/>
    <SolidColorBrush x:Key="Window.Static.Border" Color="DarkGray"/>

    <Style x:Key="Window.Style" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource Window.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Window.Static.Border}"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="Icon" Value="/Resources/Logo.png"/>
    </Style>

    <Style x:Key="Window.NoResize.Style" TargetType="{x:Type Window}" BasedOn="{StaticResource Window.Style}">
        <Setter Property="Background" Value="{DynamicResource Window.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Window.Static.Border}"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
    </Style>
    <!-- #endregion -->


    <!-- #region Top Panel -->
    <SolidColorBrush x:Key="TopPanel.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="TopPanel.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="TopButton.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="TopButton.Highlight.Background" Color="#FF282828"/>

    <!-- #region Panel -->
    <Style x:Key="TopPanel.Style" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{DynamicResource TopPanel.Static.Background}"/>
        <Setter Property="Height" Value="25"/>
    </Style>
    <!-- #endregion -->

    <!--#region IconApp-->
    <Style x:Key="TopPanel.Icon.Style" TargetType="{x:Type Label}">
        <Setter Property="Content" Value="{DynamicResource Application.Icon}"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Margin" Value="3,3,0,0"/>
    </Style>
    <!--#endregion-->

    <!-- #region Top Button -->
    <Style x:Key="TopButton.Style" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Label x:Name="label" 
                               Background="{DynamicResource TopButton.Static.Background}" 
                               Content="{TemplateBinding Property=Button.Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="label" Property="Background" Value="{DynamicResource TopButton.Highlight.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Image x:Key="Image.Minimize" 
           x:Shared="False"  
           Source="/Resources/butMinimize.png" 
           Height="100" 
           Width="20" 
           Margin="5,-3,-6,0"    
           HorizontalAlignment="Left" 
           VerticalAlignment="Top"/>
    <Image x:Key="Image.Maximize" 
           x:Shared="False"  
           Source="/Resources/butMaximize.png" 
           Height="100" 
           Width="20" 
           Margin="3,-3,-6,0"
           HorizontalAlignment="Left" 
           VerticalAlignment="Top"/>
    <Image x:Key="Image.Restore" 
           x:Shared="False" 
           Source="/Resources/butRestore.png" 
           Height="100"
           Width="20" 
           Margin="3,-3,-6,0"
           HorizontalAlignment="Left" 
           VerticalAlignment="Top"/>
    <Image x:Key="Image.Close" 
           x:Shared="False"  
           Source="/Resources/butClose.png" 
           Height="100" 
           Width="20" 
           Margin="3,-3,-6,0"
           HorizontalAlignment="Left" 
           VerticalAlignment="Top"/>

    <Style x:Key="TopButton.Minimize.Style" TargetType="{x:Type Button}" BasedOn="{StaticResource TopButton.Style}">
        <Setter Property="Content" Value="{StaticResource Image.Minimize}"/>
        <Setter Property="ToolTip" Value="Свернуть"/>
        <Setter Property="Canvas.Right" Value="70"/>
    </Style>
    <Style x:Key="TopButton.Maximize.Style" TargetType="{x:Type Button}" BasedOn="{StaticResource TopButton.Style}">
        <Setter Property="Content" Value="{StaticResource Image.Maximize}"/>
        <Setter Property="ToolTip" Value="Развернуть"/>
        <Setter Property="Canvas.Right" Value="35"/>
    </Style>
    <Style x:Key="TopButton.Restore.Style" TargetType="{x:Type Button}" BasedOn="{StaticResource TopButton.Style}">
        <Setter Property="Content" Value="{StaticResource Image.Restore}"/>
        <Setter Property="ToolTip" Value="Восстановить"/>
        <Setter Property="Canvas.Right" Value="35"/>
    </Style>
    <Style x:Key="TopButton.Close.Style" TargetType="{x:Type Button}" BasedOn="{StaticResource TopButton.Style}">
        <Setter Property="Content" Value="{StaticResource Image.Close}"/>
        <Setter Property="ToolTip" Value="Закрыть"/>
        <Setter Property="Canvas.Right" Value="0"/>
    </Style>
    <!-- #endregion -->
    <!-- #endregion -->


    <!-- #region Button -->
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="Button.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="Button.Highlight.Background" Color="Gray"/>
    <SolidColorBrush x:Key="Button.Highlight.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF646464"/>

    <Style x:Key="Button.Style" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Label x:Name="buttContent"
                           Width="{TemplateBinding Width}" 
                           Height="{TemplateBinding Height}" 
                           Background="{DynamicResource Button.Static.Background}" 
                           Foreground="{DynamicResource Button.Static.Foreground}"  
                           HorizontalContentAlignment="Center" 
                           BorderBrush="{DynamicResource Button.Static.Border}" 
                           BorderThickness="1"
                           Padding="5,0,5,0" 
                           Content="{TemplateBinding Property=Button.Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="buttContent" Property="Background" Value="{DynamicResource Button.Highlight.Background}"/>
                            <Setter TargetName="buttContent" Property="Foreground" Value="{DynamicResource Button.Highlight.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="buttContent" Property="Foreground" Value="{DynamicResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- endregion -->


    <!--#region CheckBox-->
    <SolidColorBrush x:Key="CheckBox.Static.Foreground" Color="WhiteSmoke"/>
    <!--#endregion-->
    
    
    <!--#region TextBlock-->
    <SolidColorBrush x:Key="TextBlock.Static.Foreground" Color="WhiteSmoke"/>
    <!--#endregion-->

    
    <!--#region TextBox-->
    <SolidColorBrush x:Key="TextBox.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FF282828"/>
    <SolidColorBrush x:Key="TextBox.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="TextBox.Selection.Background" Color="#FF969696"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="TextBox.Focused.Background" Color="#FF383838"/>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}"/>
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Static.Foreground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource TextBox.Selection.Background}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource TextBox.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{DynamicResource TextBox.Focused.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region PasswordBox-->
    <SolidColorBrush x:Key="PasswordBox.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="PasswordBox.Static.Background" Color="#FF282828"/>
    <SolidColorBrush x:Key="PasswordBox.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="PasswordBox.Selection.Background" Color="#FF969696"/>
    <SolidColorBrush x:Key="PasswordBox.MouseOver.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="PasswordBox.Focused.Background" Color="#FF383838"/>
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PasswordBox.Static.Border}"/>
        <Setter Property="Background" Value="{DynamicResource PasswordBox.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource PasswordBox.Static.Foreground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource PasswordBox.Selection.Background}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource PasswordBox.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{DynamicResource PasswordBox.Focused.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region Separator-->
    <SolidColorBrush x:Key="Separator.Static.Background" Color="#FF585858"/>
    <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Grid.Column" Value="0"/>
        <Setter Property="Grid.ColumnSpan" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Margin="0,1,0,1" SnapsToDevicePixels="true" UseLayoutRounding="False">
                        <Rectangle Fill="{DynamicResource Separator.Static.Background}" Height="1" Margin="5,0,5,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->


    <!--#region Menu-->
    <SolidColorBrush x:Key="Menu.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="Menu.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="Menu.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="Menu.Static.Separator" Color="DarkGray"/>
    <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF646464"/>


    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource Menu.Static.Background}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource Menu.Static.Foreground}"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="5,3,0,0" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="MenuItem.Selected.Background" Color="Transparent"/>
    <!--Выбранный пункт (галочкой)-->
    <SolidColorBrush x:Key="MenuItem.Selected.Border" Color="DarkGray"/>
    <!--Выбранный пункт (галочкой)-->
    <SolidColorBrush x:Key="MenuItem.TopLevel.SubmenuOpen.Background" Color="#FF282828"/>
    <SolidColorBrush x:Key="MenuItem.TopLevel.SubmenuOpen.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="MenuItem.TopLevel.Highlight.Background" Color="#FF335878"/>
    <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#FF335878"/>
    <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="MenuItem.SubMenu.Static.Background" Color="#FF282828"/>
    <SolidColorBrush x:Key="MenuItem.SubMenu.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="MenuItem.Arrow.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="MenuItem.Checkmark.Background" Color="DarkGray"/>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <Geometry x:Key="CheckmarkOld">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>
    <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="templateRoot" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.Row="1">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource UpArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                        </RepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="0" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource DownArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource MenuItem.Checkmark.Background}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Disabled.Border}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#region Шаблон главных пунктов меню-->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" 
                                  ContentSource="Icon" 
                                  HorizontalAlignment="Center" 
                                  Height="16" 
                                  Margin="3" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  VerticalAlignment="Center" 
                                  Width="16"/>
                <Path x:Name="GlyphPanel" 
                      Data="{StaticResource Checkmark}" 
                      FlowDirection="LeftToRight" 
                      Fill="{DynamicResource MenuItem.Checkmark.Background}" 
                      Margin="3" 
                      VerticalAlignment="Center" 
                      Visibility="Collapsed"/>
                <ContentPresenter ContentSource="Header" 
                                  Grid.Column="1" 
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <Popup x:Name="PART_Popup" 
                       AllowsTransparency="true" 
                       Focusable="false" 
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom" 
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                       PlacementTarget="{Binding ElementName=templateRoot}">
                    <Grid>
                        <DockPanel LastChildFill="True">
                            <Border x:Name="SubmenuBorder_Left"
                                DockPanel.Dock="Left" 
                                Background="{DynamicResource MenuItem.SubMenu.Static.Background}"
                                BorderBrush="{DynamicResource MenuItem.SubMenu.Static.Border}"
                                BorderThickness="1,0,0,1"
                                Width="{Binding ElementName=templateRoot, Path=ActualWidth}">
                            </Border>
                            <Border x:Name="SubmenuBorder_Right"
                                    Margin="-1,0,0,0"
                                    Background="{DynamicResource MenuItem.SubMenu.Static.Background}"
                                    BorderBrush="{DynamicResource MenuItem.SubMenu.Static.Border}"
                                    BorderThickness="0,1,1,1"/>
                        </DockPanel>
                        <Grid RenderOptions.ClearTypeHint="Enabled">
                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="OpaqueRect" Fill="{DynamicResource MenuItem.SubMenu.Static.Background}" />
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                        </Grid>
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.TopLevel.Highlight.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.TopLevel.SubmenuOpen.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.TopLevel.SubmenuOpen.Border}"/>
                <Setter Property="BorderThickness" TargetName="templateRoot" Value="1,1,1,0"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->
    <!--#region Шаблон раскрывающихся пунктов меню-->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Border x:Name="GlyphPanel" Background="{DynamicResource MenuItem.Highlight.Background}" BorderBrush="{StaticResource MenuItem.Highlight.Border}" BorderThickness="1" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                    <Path x:Name="Glyph" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource MenuItem.Checkmark.Background}" Height="11" Width="9"/>
                </Border>
                <ContentPresenter ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                <Path x:Name="RightArrow" Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{DynamicResource MenuItem.Arrow.Background}" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder" Background="{DynamicResource MenuItem.SubMenu.Static.Background}" BorderBrush="{DynamicResource MenuItem.SubMenu.Static.Border}" BorderThickness="1" Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->
    <!--#region Шаблон пунктов меню-->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Border x:Name="GlyphPanel" Background="{StaticResource MenuItem.Selected.Background}" BorderBrush="{StaticResource MenuItem.Selected.Border}" BorderThickness="1" ClipToBounds="False" HorizontalAlignment="Center" Height="16" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="16">
                    <Path x:Name="Glyph" Data="{StaticResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource MenuItem.Checkmark.Background}" Height="11" Width="10"/>
                </Border>
                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion-->

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Menu.Static.Foreground}"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Background" Value="{DynamicResource Menu.Static.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Menu.Static.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Menu.Static.Foreground}"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region ScrollBar-->
    <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="ScrollBar.Thumb.Static.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="ScrollBar.Thumb.Select.Background" Color="Gainsboro"/>
    <SolidColorBrush x:Key="ScrollBar.RepeatButton.Static.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ScrollBar.RepeatButton.Select.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="ScrollBar.Arrow.Static.Background" Color="DarkGray"/>
    <SolidColorBrush x:Key="ScrollBar.Arrow.Pressed.Background" Color="#FF006FA9"/>
    <SolidColorBrush x:Key="ScrollBar.Arrow.Select.Background" Color="#FF383838"/>


    <Style x:Key="ScrollBarLineButton"
       TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border"
                            Margin="1"
                            CornerRadius="0"
                            BorderThickness="0"
                            BorderBrush="Transparent"
                            Background="{DynamicResource ScrollBar.RepeatButton.Static.Background}">
                        <Path x:Name="Arrow"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             Fill="{DynamicResource ScrollBar.Arrow.Static.Background}"
                             Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ScrollBar.RepeatButton.Select.Background}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ScrollBar.Arrow.Select.Background}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ScrollBar.Arrow.Pressed.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumbVert"
           TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Width" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Name="thumbBorder"
                            CornerRadius="2"
                            Background="{DynamicResource ScrollBar.Thumb.Static.Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="thumbBorder" Property="Background" Value="{DynamicResource ScrollBar.Thumb.Select.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHor"
           TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Height" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Name="thumbBorder"
                            CornerRadius="2"
                            Background="{DynamicResource ScrollBar.Thumb.Static.Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="thumbBorder" Property="Background" Value="{DynamicResource ScrollBar.Thumb.Select.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar"
                 TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <!-- Фон -->
            <Border Grid.RowSpan="3"
                    CornerRadius="0"
                    Background="{DynamicResource ScrollBar.Static.Background}"
                    BorderThickness="0"/>
            <!-- Кнопка вверх -->
            <RepeatButton Grid.Row="0"
                          Style="{StaticResource ScrollBarLineButton}"
                          Height="18"
                          Command="ScrollBar.LineUpCommand"
                          Content="M 0 4 L 8 4 L 4 0 Z" />
            <!-- Бигунок -->
            <Track x:Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbVert}"
                           Margin="1,0,1,0">
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <!-- Кнопка вниз -->
            <RepeatButton Grid.Row="2"
                          Style="{StaticResource ScrollBarLineButton}"
                          Height="18"
                          Command="ScrollBar.LineDownCommand"
                          Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar"
                 TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <!-- Фон -->
            <Border Grid.ColumnSpan="3"
                    CornerRadius="0"
                    Background="{DynamicResource ScrollBar.Static.Background}" 
                   BorderThickness="0" />
            <!-- Кнопка лево -->
            <RepeatButton Grid.Column="0"
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="ScrollBar.LineLeftCommand"
                  Content="M 4 0 L 4 8 L 0 4 Z" />
            <!-- Бигунок -->
            <Track x:Name="PART_Track"
                   Grid.Column="1"
                   IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbHor}"
                           Margin="0,1,0,1"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <!-- Кнопка вправо -->
            <RepeatButton Grid.Column="2"
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="ScrollBar.LineRightCommand"
                  Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}"
       TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation"
             Value="Horizontal">
                <Setter Property="Width"
              Value="Auto" />
                <Setter Property="Height"
              Value="18" />
                <Setter Property="Template"
              Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation"
             Value="Vertical">
                <Setter Property="Width"
              Value="18" />
                <Setter Property="Height"
              Value="Auto" />
                <Setter Property="Template"
              Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    
    <!--#region ScrollViewer-->
    <SolidColorBrush x:Key="ScrollViewer.Rectangle.Static.Background" Color="#FF383838"/>
    
    <Style x:Key="RightScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" 
                                       Value="{TemplateBinding HorizontalOffset}"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <Rectangle Grid.Row="1" Grid.Column="1" Fill="{DynamicResource ScrollViewer.Rectangle.Static.Background}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LeftScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="1" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="1"
                                       Value="{TemplateBinding HorizontalOffset}"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <Rectangle Grid.Row="1" Fill="{DynamicResource ScrollViewer.Rectangle.Static.Background}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->


    <!--#region TabControl-->
    <SolidColorBrush x:Key="TabControl.Static.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="TabControl.Static.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="TabControl.HeaderBorder.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="TabControl.HeaderBorder.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="TabControl.Item.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="TabControl.Item.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="TabControl.Item.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="TabControl.Item.Selected.Background" Color="#FF335878"/>
    <SolidColorBrush x:Key="TabControl.Item.Highlight.Background" Color="Gray"/>

    <Style x:Key="LeftTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="TabStripPlacement" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="{DynamicResource TabControl.Static.Background}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="True" 
                          SnapsToDevicePixels="True"
                          KeyboardNavigation.TabNavigation="Local">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" Name="sd"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid Grid.Row="1" Grid.Column="0">
                            <Border x:Name="HeaderBorder" 
                                BorderBrush="Transparent" 
                                BorderThickness="2" 
                                CornerRadius="2" 
                                Background="{DynamicResource TabControl.HeaderBorder.Static.Background}" 
                                Margin="0">
                                <ScrollViewer Style="{DynamicResource LeftScrollViewer}" 
                                              VerticalContentAlignment="Center" 
                                              VerticalScrollBarVisibility="Auto" 
                                              HorizontalScrollBarVisibility="Disabled">
                                    <TabPanel Panel.IsItemsHost="True" 
                                              Name="HeaderPanel" 
                                              Panel.ZIndex="1" 
                                              KeyboardNavigation.TabIndex="1"  
                                              Margin="5,5,5,5"/>
                                </ScrollViewer>
                            </Border>

                        </Grid>
                        <Grid Name="ContentPanel" 
                              KeyboardNavigation.TabIndex="2"
                              KeyboardNavigation.TabNavigation="Local"
                              KeyboardNavigation.DirectionalNavigation="Contained" 
                              Grid.Column="1"
                              Grid.Row="1">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    CornerRadius="0">
                                <ContentPresenter Content="{TemplateBinding SelectedContent}" 
                                                  ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                                  ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                                  ContentSource="SelectedContent" 
                                                  Name="PART_SelectedContentHost" 
                                                  Margin="2"
                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>

                            </Border>
                        </Grid>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource TabControl.Item.Static.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource TabControl.Item.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource TabControl.Item.Static.Border}" />
        <Setter Property="Height" Value="25" />
        <Setter Property="MaxWidth" Value="150"/>
        <Setter Property="FontFamily" Value="./#Segoe UI" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="AllowDrop" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border SnapsToDevicePixels="True" 
                            Name="Border"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Margin="0,0,2,0" 
                            Padding="2" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="0">
                        <Grid>
                            <ContentPresenter Name="ContentSite"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="10,0,10,0" 
                                              VerticalAlignment="Center" 
                                              RecognizesAccessKey="True"
                                              ContentSource="Header"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource TabControl.Item.Selected.Background}" />
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource TabControl.Item.Highlight.Background}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region DataGrid -->
    <SolidColorBrush x:Key="DataGrid.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="DataGrid.Static.Foreground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="DataGrid.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="DataGrid.Static.HorLine" Color="DarkGray"/>
    <SolidColorBrush x:Key="DataGrid.Static.VertLine" Color="DarkGray"/>
    <SolidColorBrush x:Key="DataGrid.ColumnHeader.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="DataGrid.ColumnHeader.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="DataGrid.RowHeader.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="DataGrid.RowHeader.Static.Border" Color="DarkGray"/>
    <SolidColorBrush x:Key="DataGrid.Row.Static.Background" Color="#FF383838"/>
    <SolidColorBrush x:Key="DataGrid.Row.Select.Background" Color="#FF181818"/>
    
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource DataGrid.ColumnHeader.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGrid.ColumnHeader.Static.Border}"/>
        <Setter Property="BorderThickness" Value="0,0,2,2"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,-3,0,0"/>
        <Setter Property="Padding" Value="15,0,15,0"/>
        <Setter Property="HorizontalContentAlignment"  Value="Center"/>
    </Style>
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Background" Value="{DynamicResource DataGrid.RowHeader.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGrid.RowHeader.Static.Border}"/>
        <Setter Property="BorderThickness" Value="0,0,2,2"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="HorizontalContentAlignment"  Value="Center"/>
    </Style>
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource DataGrid.Row.Static.Background}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGrid.Row.Select.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{DynamicResource DataGrid.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGrid.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource DataGrid.Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource DataGrid.Static.HorLine}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource DataGrid.Static.VertLine}"/>
        <Setter Property="HeadersVisibility" Value="None"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Button Command="ApplicationCommands.SelectAll" Focusable="False" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}">
                                            <Button.Visibility>
                                                <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                    <Binding.ConverterParameter>
                                                        <DataGridHeadersVisibility>All</DataGridHeadersVisibility>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </Button.Visibility>
                                        </Button>
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1">
                                            <DataGridColumnHeadersPresenter.Visibility>
                                                <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                    <Binding.ConverterParameter>
                                                        <DataGridHeadersVisibility>Column</DataGridHeadersVisibility>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </DataGridColumnHeadersPresenter.Visibility>
                                        </DataGridColumnHeadersPresenter>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" Grid.ColumnSpan="2" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="0" Grid.RowSpan="2" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"
                                       Template="{StaticResource VerticalScrollBar}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"
                                           Template="{StaticResource HorizontalScrollBar}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
</ResourceDictionary>